# Genera nuove posizioni con l'ultimo livello esattamente alla stessa altezza del penultimo
def generate_fixed_last_level_positions(levels, base_spacing=3.5, expansion_factor=3.0):
pos = {}
max_depth = max(levels.keys())
for depth, nodes in levels.items():
num_nodes = len(nodes)
if depth == max_depth:  # Ultimo livello deve avere la stessa altezza del penultimo
reference_width = len(levels[depth - 1])  # Ampiezza del penultimo livello
else:
reference_width = num_nodes
# Calcoliamo la distribuzione verticale con riferimento al livello precedente
y_positions = np.linspace(-reference_width / 2, reference_width / 2, num_nodes) * (base_spacing + (depth if depth < max_depth else max_depth - 1) * expansion_factor)
for (name, x, _), y in zip(nodes, y_positions):
pos[name] = (x, y)
return pos
# Genera nuove posizioni con l'ultimo livello allineato al penultimo
pos = generate_fixed_last_level_positions(levels, base_spacing=3.5, expansion_factor=3.0)
# Disegna il grafo con l'ultimo livello allineato al penultimo
plt.figure(figsize=(10, 12))
nx.draw(G, pos, with_labels=True, node_size=2500, node_color="lightblue", font_size=12, font_weight="bold", edge_color="gray", arrows=False)
plt.title("Albero delle permutazioni di 3 lettere (fattoriale di 3) - Ultimo livello allineato", fontsize=14)
plt.show()
import matplotlib.pyplot as plt
import networkx as nx
import matplotlib.pyplot as plt
reticulate::repl_python()
reticulate::py_config()
reticulate::py_install("matplotlib", envname = "r-reticulate")
reticulate::py_install("networkx", envname = "r-reticulate")
reticulate::repl_python()
